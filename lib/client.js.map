{"version":3,"sources":["client.js"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["/**\n * client.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport OS          from 'os';\nimport URL         from 'url';\nimport Chalk       from 'chalk';\nimport Debug       from 'debug';\nimport Twilio      from 'twilio';\nimport Bluebird    from 'bluebird';\nimport Monologue   from 'monologue.js';\n\nconst debug = Debug('ignis:twilio:client');\n\n\n/*!\n * Fake call object template.\n */\nconst fakeCall = {\n  sid: 'fake_call',\n  update: (i, f) => f()\n};\n\n/*!\n * Extended Twilio client with support for dry run.\n */\nexport default class Client {\n\n  constructor(cfg) {\n    this.__native = Twilio(cfg.sid, cfg.token);\n\n    /* Hostname for URL resolution */\n    this.host = process.env.HOSTNAME || cfg.hostname || 'http://' + OS.hostname();\n\n    /* Setup host URL */\n    const parsed = URL.parse(this.host);\n    if (cfg.auth) {\n      parsed.auth = `${cfg.auth.username}:${cfg.auth.password}`;\n    }\n    this.host = URL.format(parsed);\n\n    /* Dry run, which either omits or redirects calls/messages */\n    this.config = cfg;\n    this.dry = cfg.dry || false;\n  }\n\n\n  /*!\n   * Makes a call, respecting the dry run\n   */\n  call(number, params) {\n\n    /* Substitute with dry-run numbers if specified */\n    if (this.dry) {\n      params.to = this.dry;\n    } else {\n      params.to = number;\n    }\n\n    /* Initialize default values */\n    _.defaults(params, this.config.call);\n\n\n    /* Resolve relative URIs */\n    params.statusCallback = params.statusCallback ?\n      URL.resolve(this.host, params.statusCallback) : '';\n    params.url = URL.resolve(this.host, params.url);\n\n\n    /* Make the call if we actually have destination numbers */\n    if (_.isArray(params.to)) { params.to = params.to[0]; }\n    if (params.to && typeof params.to !== 'boolean') {\n      debug(`${Chalk.bold.yellow('[calling]')} ${params.to}`);\n      return Bluebird.resolve(this.__native.makeCall(params));\n    }\n\n    debug(`${Chalk.bold.yellow('[dry-run]')} Skipping the call.`);\n    return Bluebird.resolve(fakeCall);\n  }\n\n\n  /*!\n   * Sends a test message, respecting the dry run\n   */\n  text(number, params) {\n\n    /* Substitute with dry-run numbers if specified */\n    if (this.dry) { number = this.dry; }\n\n    /* Set up the message template */\n    const template = _.defaults({ body: params.message }, this.config.text);\n\n    /* Send out messages */\n    const promises = _\n      .chain([number])\n      .flatten()\n      .compact()\n      .map(phone => _.assign({ to: phone }, template))\n      .map(data => Bluebird.resolve(this.__native.sendMessage(data)))\n      .value();\n\n    return Bluebird.all(promises);\n  }\n\n\n  /*!\n   * Gets a call's data.\n   */\n  async find(sid) {\n    const call = await this.__native.calls(sid).get();\n    return call;\n  }\n\n\n  /*!\n   * Updates a call.\n   */\n  async update(call, changes) {\n    return Bluebird.fromNode(done => call.update(changes, done));\n  }\n\n\n}\n\n\n/*!\n * Let Client instances emit events.\n */\nMonologue.mixInto(Client);\n"],"sourceRoot":"/source/"}