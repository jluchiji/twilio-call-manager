{"version":3,"sources":["manager.js"],"names":[],"mappings":"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","file":"manager.js","sourcesContent":["/**\n * manager.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Chalk       from 'chalk';\nimport Debug       from 'debug';\nimport Moment      from 'moment';\nimport Client      from './client';\n\nconst debug = Debug('ignis:twilio:manager');\n\n\nexport default class CallManager extends Client {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /* Object to store call data */\n    this.calls = Object.create(null);\n  }\n\n\n  /*!\n   * Spawn a call.\n   */\n  async spawn(number, params, data) {\n    params.to = number;\n\n    /* Find existing call information for the phone */\n    const info = this.calls[number] || { failed: 0 };\n\n    /* Setup default call info parameters */\n    const defaults = { to: number, active: true, delay: undefined };\n    this.calls[number] = _.assign(info, defaults);\n\n    /* Spawn the call and record its SID */\n    info.call = await this.call(number, params);\n\n    /* Set a timeout to hang up the call */\n    if (info.call && this.config.timeout) {\n      info.timeout = setTimeout(() => {\n        this.update(info.call, { status: 'completed' });\n      }, this.config.timeout * 1000);\n    }\n\n    /* Also, emit the call start event */\n    this.emit('start', { call: info, data: data });\n    return info;\n  }\n\n\n  /*!\n   * Report end of the call.\n   */\n  finished(number, params, data) {\n\n    /* Find existing call information for the phone number */\n    const info = this.calls[number];\n\n    /* Ignore if there is no such active call */\n    if (!info || !info.active) {\n      debug(`${Chalk.bold.red('ERROR')} Phone number has no active calls.`);\n      return;\n    }\n\n    /* Ignore if reported SID does not match the one we are waiting for. */\n    if (info.call.sid !== params.CallSid) {\n      debug(`${Chalk.bold.red('ERROR   ')} Call SID mismatch: ${info.call.sid} vs ${params.CallSid}`);\n      return;\n    }\n\n    /* Emit call finished event depending on call status */\n    switch (params.CallStatus) {\n    case 'completed':\n      this.emit('success', { call: info, data: data });\n      this.calls[number] = { failed: 0, active: false };\n      break;\n    case 'busy':\n    case 'failed':\n    case 'canceled':\n    case 'no-answer':\n      info.delay = Moment().add(this.config.retryDelay, 'seconds');\n      info.active = false;\n      info.failed++;\n      this.emit('failed', { call: info, data: data });\n      break;\n    default:\n      debug(`${Chalk.bold.red('ERROR   ')} Unexpected call status ${params.CallStatus}`);\n    }\n\n    /* Clear timeout and call data */\n    clearTimeout(info.timeout);\n  }\n\n\n  /*!\n   * Gets an array of phone numbers with active calls.\n   */\n  getActivePhones() {\n    debug(`Managing ${Object.keys(this.calls).length} entries`);\n\n    return _\n      .chain(this.calls)\n      .values()\n      .filter(call => call.active || Moment().isBefore(call.delay))\n      .pluck('to')\n      .value();\n  }\n\n\n}\n"],"sourceRoot":"/source/"}